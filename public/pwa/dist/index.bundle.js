(()=>{"use strict";var e={618:(e,t,r)=>{function n(e){var t=document.createElement("li");t.textContent=e,states.appendChild(t)}function i(e){"serviceWorker"in navigator?(availability.textContent="are",controlled.textContent=navigator.serviceWorker.controller?"is":"is not",navigator.serviceWorker.register("sw.js",{scope:"/pwa/"}).then((function(e){var t;register.textContent="succeeded",e.installing?(t=e.installing,kind.textContent="installing"):e.waiting?(t=e.waiting,kind.textContent="waiting"):e.active&&(t=e.active,kind.textContent="active"),t&&(n(t.state),t.addEventListener("statechange",(function(e){n(e.target.state)})))})).catch((function(e){register.textContent="failed: "+e})),navigator.serviceWorker.addEventListener("message",(t=>{console.log("[sw.js] -> [main-thread]:",t.data),appVersion.textContent=t.data.version?t.data.version:"unknown",e()})),navigator.serviceWorker.ready.then((e=>{e.active.postMessage("a message from main-thread")}))):availability.textContent="are not"}r.d(t,{B:()=>i})}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,r),a.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{r(618).B((()=>{console.log("finish loading!")})),toggleShowServiceWorker.addEventListener("click",(e=>{null!==serviceWorkerContent.getAttribute("hidden")?(serviceWorkerContent.removeAttribute("hidden"),indicatorShowServiceWorker.classList.replace("square-arrow-down-filled","square-arrow-up-filled")):(serviceWorkerContent.setAttribute("hidden",""),indicatorShowServiceWorker.classList.replace("square-arrow-up-filled","square-arrow-down-filled"))}));const e=document.querySelectorAll("nav > div div"),t=document.querySelectorAll("main > div");let n=3;function i(){return n}e.forEach(((r,a)=>{r.onclick=o=>{r.classList.contains("active")||(!function(e){n=e}(a),e.forEach((e=>{e.classList.remove("active")})),t.forEach(((e,t)=>{t!==i()?e.style.display="none":e.style.display="block"})),o.target.classList.add("active"))}})),e[i()].click()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,